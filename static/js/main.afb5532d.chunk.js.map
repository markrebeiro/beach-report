{"version":3,"sources":["DayCard.js","BeachSelect.js","serviceWorker.js","index.js","App.js"],"names":["DayCard","day","updated","rating","reason","ratingClass","calcClass","className","Date","toLocaleDateString","month","year","hour","minute","timeZoneName","BeachSelect","selectedBeach","handleChange","beaches","id","value","onChange","map","beach","siteId","key","siteName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","useState","setBeaches","setSelectedBeach","isLoading","setIsLoading","useEffect","a","fetch","cache","result","json","beachData","siteList","beachDataSorted","sort","b","localeCompare","getData","info","find","e","target","councilName","todayUpdated","todayRating","todayRatingReason","tomorrowUpdated","tomorrowRating","tomorrowRatingReason","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.afb5532d.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nexport default function DayCard({ day, updated, rating, reason }) {\n  const formatDate = dateInMs => {\n    const date = new Date(dateInMs);\n    const dateOptions = {\n      month: 'short',\n      day: 'numeric',\n      year: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZoneName: 'short',\n    };\n    return date.toLocaleDateString('au-EN', dateOptions);\n  };\n\n  const calcClass = rating => {\n    if (rating === 'Good') {\n      return 'good';\n    } else if (rating === 'Fair') {\n      return 'fair';\n    } else if (rating === 'Poor') {\n      return 'poor';\n    } else {\n      return 'na';\n    }\n  };\n\n  const ratingClass = calcClass(rating);\n\n  return (\n    <Fragment>\n      {!rating ? (\n        <h3>{day} - Forecast data unavailable</h3>\n      ) : (\n        <div>\n          <h3>\n            {day} - <span className={ratingClass}> {rating}</span>\n          </h3>\n          <p>{reason}</p>\n          <p className=\"updated-at-text\">Updated: {formatDate(updated)}</p>\n        </div>\n      )}\n    </Fragment>\n  );\n}\n","import React from 'react';\n\nexport default function BeachSelect({ selectedBeach, handleChange, beaches }) {\n\n  return (\n    <div className=\"select-container\">\n          <select\n            id=\"beach-select\"\n            value={selectedBeach}\n            onChange={handleChange}\n          >\n            {beaches.map(beach => {\n              return (\n                <option value={beach.siteId} key={beach.siteId}>\n                  {beach.siteName}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React, { useState, useEffect, Fragment } from 'react';\nimport './App.css';\nimport DayCard from './DayCard';\nimport BeachSelect from './BeachSelect';\n\nexport default function App() {\n  const [beaches, setBeaches] = useState([]);\n  const [selectedBeach, setSelectedBeach] = useState('99660');\n  const [isLoading, setIsLoading] = useState(true);\n\n  const handleChange = e => {\n    setSelectedBeach(e.target.value);\n  };\n\n  useEffect(() => {\n    const getData = async () => {\n      const result = await fetch(\n        'https://cors-anywhere.herokuapp.com/https://yarraandbay.vic.gov.au/resources/br_sitereportget.json',\n        { cache: 'no-store' },\n      );\n      const value = await result.json();\n\n      const beachData = value.siteList;\n      const beachDataSorted = [...beachData].sort((a, b) =>\n        a.siteName.localeCompare(b.siteName),\n      );\n      setBeaches(beachDataSorted);\n      setIsLoading(false);\n    };\n\n    getData();\n  }, []);\n\n  const info = (beaches.find(beach => beach.siteId === +selectedBeach) || {});\n\n  return (\n    <div className=\"App\">\n      <div className=\"header-banner\">\n        <header className=\"header-content\">\n          <h1>Beach Report</h1>\n        </header>\n      </div>\n      <section className=\"beach-content\">\n        {isLoading ? (\n          <h2>...Loading</h2>\n        ) : (\n          <Fragment>\n            <BeachSelect\n              handleChange={handleChange}\n              selectedBeach={selectedBeach}\n              beaches={beaches}\n            />\n            <p>{info.councilName}</p>\n            <div className=\"beach-card\">\n              <DayCard\n                day=\"Today\"\n                updated={info.todayUpdated}\n                rating={info.todayRating}\n                reason={info.todayRatingReason}\n              />\n              <DayCard\n                day=\"Tomorrow\"\n                updated={info.tomorrowUpdated}\n                rating={info.tomorrowRating}\n                reason={info.tomorrowRatingReason}\n              />\n            </div>\n          </Fragment>\n        )}\n      </section>\n    </div>\n  );\n}\n"],"sourceRoot":""}